# image: python:3.9

# stages:
#   - run

# before_script:
#   - python --version
#   - pip install --upgrade pip
#   - pip install -r requirements.txt

# scrape_and_update:
#   stage: run
#   script:
#     - python scrape_and_update.py







# .gitlab-ci.yml
stages:
  - initial-scrape
  - scheduled-updates

variables:
  PYTHON_VERSION: "3.9"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Cache pip dependencies
cache:
  paths:
    - .cache/pip/
    - venv/

# Initial complete scrape (manual trigger or first deployment)
initial_scrape:
  stage: initial-scrape
  image: python:${PYTHON_VERSION}
  before_script:
    - python -m venv venv
    - source venv/bin/activate
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - playwright install chromium
  script:
    - echo "Running INITIAL COMPLETE SCRAPE for all counties..."
    - python main.py --mode=initial
  variables:
    SCRAPE_MODE: "initial"
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $SCRAPE_TYPE == "initial"
      when: manual
    - if: $CI_COMMIT_TAG
      when: manual
  artifacts:
    reports:
      junit: test-results.xml
    paths:
      - logs/
    expire_in: 1 week
  timeout: 2h

# Scheduled incremental updates
scheduled_updates:
  stage: scheduled-updates
  image: python:${PYTHON_VERSION}
  before_script:
    - python -m venv venv
    - source venv/bin/activate
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - playwright install chromium
  script:
    - echo "Running INCREMENTAL UPDATE scrape..."
    - python main.py --mode=update
  variables:
    SCRAPE_MODE: "update"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web" && $SCRAPE_TYPE == "update"
      when: manual
  artifacts:
    reports:
      junit: test-results.xml
    paths:
      - logs/
    expire_in: 3 days
  timeout: 45m

# Manual trigger for emergency runs
emergency_scrape:
  stage: scheduled-updates
  extends: scheduled_updates
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $SCRAPE_TYPE == "emergency"
      when: manual
  script:
    - echo "Running EMERGENCY SCRAPE..."
    - python main.py --mode=emergency